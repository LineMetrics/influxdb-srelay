###############################
##
## InfluxDB Single instances Config
##
###############################
[[influxdb]]
  name = "influxdb01"
  location = "http://influxdb-a:8086/"
  timeout = "10s"
[[influxdb]]
  name = "influxdb02"
  location = "http://influxdb-b:8086/"
  timeout = "10s"

#################################
##
## InfluxDB Cluster Configs as a set 
## of influxdb Single Instances
##
################################# 

[[influxcluster]]

  name  = "cluster_linux"
  members = ["influxdb01","influxdb02"]
  log-file = "cluster_linux.log"
  log-level = "debug"
  type = "HA"
  rate-limit = 100  
  burst-limit =  100
  default-ping-response-code = 200
  #query-router-endpoint-api = ["http://syncflux-a:4090/api/queryactive","http://syncflux-b:4090/api/queryactive"]

# HTTP Server
[[http]]
  name = "example-http-influxdb2"
  bind-addr = "0.0.0.0:9096"
  log-file = "http_relay_9096.log"
  log-level = "debug"
  access-log = "access.log"

  rate-limit = 1000000
  burst-limit = 2000000

  # IQL /query Endpoint
  #
  [[http.endpoint]]
    uri=["/query"]
    # type
    #  * RD = http for query db
    #  * WR = http for send data to the db
    type="RD"
    # source_format 
    # Supported formats
    # * ILP = influxdb-line-protocol
    # * prom-write = prometheus write format
    # * IQL = Influx Query Language
    source_format="IQL"

    [[http.endpoint.route]]
      name="testdb_linux_metrics"
      level="http" # http or data
      log-inherit = false
      log-level = "debug"

      [[http.endpoint.route.filter]]
        name="pass_testdb_linux_metrics"
        key="db" #availabe http params
        match="testdb_linux"

      [[http.endpoint.route.rule]]
        name="testdb_linux"
        action="route"
        key="db"
        match="testdb_linux"
        to_cluster="cluster_linux"
  
    [[http.endpoint.route]]
      name="testdb_docker_metrics"
      level="http" # http or data

      [[http.endpoint.route.filter]]
        name="pass_testdb_docker_metrics"
        key="db"
        match="testdb_docker"

      ## Simple rule that routes to influxcluster
      [[http.endpoint.route.rule]]
        name="pass_testdb_docker_metrics"
        action="route"
        key="db"
        match="testdb_docker"
        to_cluster="cluster_linux"

    [[http.endpoint.route]]
      name="testdb_telegraf_metrics"
      level="http" # http or data

      [[http.endpoint.route.filter]]
        name="pass_testdb_telegraf_metrics"
        key="db"
        match="testdb_telegraf"

      [[http.endpoint.route.rule]]
        name="pass_testdb_telegraf_metrics"
        action="route"
        key="db"
        match="testdb_telegraf"
        to_cluster="cluster_linux" 

  # IQL /write Endpoint 

  [[http.endpoint]]
    uri=["/write"]
    source_format="ILP"
    type = "WR"
    
    [[http.endpoint.route]]
      name="testdb_linux_metrics"
      level="http" # http or data
      log-inherit = false
      log-level = "debug"

      [[http.endpoint.route.filter]]
        name="pass_testdb_linux_metrics"
        key="db" #availabe http params
        match="testdb_linux"

      [[http.endpoint.route.rule]]
        name="testdb_linux"
        action="route"
        key="db"
        match="testdb_linux"
        to_cluster="cluster_linux"
  
    [[http.endpoint.route]]
      name="testdb_docker_metrics"
      level="http" # http or data

      [[http.endpoint.route.filter]]
        name="pass_testdb_docker_metrics"
        key="db"
        match="testdb_docker"

      ## Simple rule that routes to influxcluster
      [[http.endpoint.route.rule]]
        name="pass_testdb_docker_metrics"
        action="route"
        key="db"
        match="testdb_docker"
        to_cluster="cluster_linux"

    [[http.endpoint.route]]
      name="testdb_telegraf_metrics"
      level="http" # http or data

      [[http.endpoint.route.filter]]
        name="pass_testdb_telegraf_metrics"
        key="db"
        match="testdb_telegraf"

      [[http.endpoint.route.rule]]
        name="pass_testdb_telegraf_metrics"
        action="route"
        key="db"
        match="testdb_telegraf"
        to_cluster="cluster_linux"    

    ## WRITE request - ALL that it doesn't match go to sinc!
    [[http.endpoint.route]]
      name="other_sinc"
      level="http"

      [[http.endpoint.route.filter]]
        name="pass_all"
        key="db"
        match=".*"

      ## Send to __SINC__ cluster, 
      [[http.endpoint.route.rule]]
        name="sinc_other"
        action="route"
        key="db"
        match=".*"
        to_cluster="__sinc__"
      #
    

  
